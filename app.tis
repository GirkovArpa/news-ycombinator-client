include "sciter:reactor.tis";
import { api } from 'main.tis';

class App : Reactor.Component {
  this var posts = [];

  async function attached(){
    const stories = await api.fetchTopStories();
    for (var id in stories.slice(0, Integer.min(10, stories.length - 1))) {
      const post = await api.fetchStory(id);
      this.update { posts: [...this.posts, ...[post]], loading: true};
    }
    this.update { loading: false};
  }
  
  event comment-click (evt){
    const commentIds = evt.data.kids;
    this.update { posts: [evt.data.parentItem], loading: true };
    api.fetchComments(commentIds).then((comments) => {
      this.update {posts: [...this.posts, ...comments], loading: false};
    });    
  }

  render() {
    return <div #root>
      <div .banner>
        <b>Hacker News</b>
        {(!this.posts.length || this.loading) ? <img .spinner src="sciter:busy.png"/> : ""}
      </div>
        <ol>
        { this.posts.map((item) => <Item item={item} />) }
        </ol>
        <a href>more</a>
      </div>;
  }
}

class Item : Reactor.Component {

  function this(props) {
    //one way to expand props
    this.extend(props);
  }

  render() {
    return this.item.type === "comment" ? <Comment item={this.item} /> : <TopStory item={this.item} />;
  }
}

class TopStory : Reactor.Component {
  this var item;
  
  function this(props) {
    //better way to expand props for readability
    this.item = props.item;
  }

  event click $(span.title, span.url) (evt, el) {
    Sciter.launch(el.@#url);
  }

  event click $(#comment) (evt, el) {
    //let the handling of state change to parent.
    this.postEvent('comment-click', {parentItem: this.item, kids: this.item.kids});
  }

  render() {
    const { url, type, title, time, score, kids, id, descendants, by } = this.item;
    const urlShort = url.match(/https?:\/\/([\w\.]+)/)[1];
    return <li .story>
      <div .title>
        <span .title url={url}>{title}</span>
        <span .url urlShort={urlShort} url={url} >{urlShort}</span>
      </div>
      <div .details>
        <span .score>{score} points by</span>
        <span .author>{by}</span>
        <span .ago>{Date.diff(new Date(time*1000.00), new Date(), #hours)} hours ago</span>|
        <span .hide>hide</span>|
        <span .kidCount #comment>{descendants} comments</span>
      </div>
    </li>;
  } 
}

class Comment : Reactor.Component {
  function this(props) {
    this.props = props;
  }
  
  render() {
    const { text, url, type, title, time, score, kids, id, descendants, by } = this.props.item;
    return <li .comment>
      <div .details .comment>
        <span .author>{by}</span>
         <span .ago>{Date.diff(new Date(time*1000.00), new Date(), #hours)} hours ago</span>
      </div>
      <div .title>
        <CommentText comment={text} />
      </div>
    </li>;
  }
}

class CommentText : Reactor.Component {
  function this(props) {
    this.props = props;
  }
  
  render() {
    const div = <div .comment-text></div>;
    this.html = this.props.comment;
    return div;
  }
}